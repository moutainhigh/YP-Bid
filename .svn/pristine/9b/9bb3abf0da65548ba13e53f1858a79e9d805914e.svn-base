package com.yuepeng.web.manage.dict.controller;

import com.yuepeng.platform.framework.base.BaseController;
import com.yuepeng.platform.framework.constant.WebConstant;
import com.yuepeng.platform.framework.exception.ServiceException;
import com.yuepeng.platform.framework.mybatis.pagination.Pagination;
import com.yuepeng.platform.framework.util.CurrentUtil;
import com.yuepeng.platform.pm.bean.entity.TSysLog;
import com.yuepeng.platform.pm.constant.PmStateConstant;
import com.yuepeng.platform.pm.service.ILogService;
import com.yuepeng.web.manage.dict.bean.excel.IndustrySubEntity;
import com.yuepeng.web.manage.dict.bean.vo.IndustrySubVo;
import com.yuepeng.web.manage.dict.constant.IndustryExpCodeConstant;
import com.yuepeng.web.manage.dict.service.IIndustrySubService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @Description: 行业分类设置Controller
 * @Author: ZhongShengbin
 * @Date: 2020/05/25 11:37
 * Copyright (c) 2019, Samton. All rights reserved
 */
@Controller
@RequestMapping("/manage/dict/")
public class IndustrySubController extends BaseController {

    /**
     * 服务对象
     */
    @Resource
    private IIndustrySubService industrySubService;

    @Resource
    private ILogService logService;

    @RequestMapping("industry/queryInfoList" + WebConstant.PAGE_SUFFIX)
    public String queryIndustryList() throws Exception {
        return "dict/industrySubList";
    }

    @RequestMapping("industry/queryIndustrySubList" + WebConstant.NO_AUTH_SUFFIX)
    public String queryIndustryPageList(Pagination<IndustrySubVo> paramBean, IndustrySubVo industrySubVo) throws Exception {
        paramBean.setSearch(industrySubVo);
        Pagination<IndustrySubVo> pageData = industrySubService.queryIndustryPageList(paramBean);
        this.addAttr("pageData", pageData);
        return "dict/industryList";
    }

    @RequestMapping("industry/exportIndustryList" + WebConstant.BUSINESS_SUFFIX)
    public String exportIndustryList(Pagination<IndustrySubVo> paramBean, IndustrySubVo datasourceVo) throws Exception {
        paramBean.setSearch(datasourceVo);
        Pagination<IndustrySubEntity> list = industrySubService.exportIndustryPageList(paramBean);
        logService.addLog(new TSysLog("行业分类设置-导出", "导出行业分类设置！", PmStateConstant.LOG_PLATFORM));
        this.export(response, "行业分类设置" + String.format("%1$tY%1$tm%1$td", new Date()), IndustrySubEntity.class, list.getData());
        return null;
    }


    @RequestMapping("industry/viewIndustryList" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewIndustry(Integer industrySubId) throws Exception {
        IndustrySubVo datasourceVo = industrySubService.viewIndustry(industrySubId);
        return this.getResultMap(true, datasourceVo);
    }

    /**
     * @return java.util.Map<java.lang.String   ,   java.lang.Object>
     * @Author ZhongShengbin
     * @Description
     * @Date 2020/5/25 0025
     * @Param [industrySubVo]
     **/
    @RequestMapping("industry/addIndustry" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> addDatasource(IndustrySubVo industrySubVo) throws Exception {
        Date date = new Date();
        industrySubVo.setCreateUserId(CurrentUtil.getCurrentUser().getUserId().intValue());
        industrySubVo.setUpdateUserId(CurrentUtil.getCurrentUser().getUserId().intValue());
        industrySubVo.setCreateDate(date);
        industrySubVo.setUpdateDate(date);
        industrySubVo.setIndustrySubName(industrySubService.selectById(industrySubVo.getIndustrySubId()).getIndustrySubName());
        boolean insertSelective = industrySubService.insertSelective(industrySubVo);
        if (insertSelective) {
            logService.addLog(new TSysLog("行业分类设置-新增", "新增行业【" + industrySubVo.getIndustrySubName() + "】成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("行业分类设置-新增", "新增行业【" + industrySubVo.getIndustrySubName() + "】失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (!insertSelective) {
            throw new ServiceException(IndustryExpCodeConstant.INFO_EDIT_COLUMN_ERROR);
        }
        return this.getResultMap(true, insertSelective);
    }

    /**
     * @return java.util.Map<java.lang.String   ,   java.lang.Object>
     * @Author ZhongShengbin
     * @Description
     * @Date 2020/5/25 0025
     * @Param [datasourceVo]
     **/
    @RequestMapping("industry/updateIndustry" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> updateIndustryource(IndustrySubVo industrySubVo) throws Exception {
        if (industrySubVo.getIndustryId() == null) {
            throw new ServiceException(IndustryExpCodeConstant.INFO_EDIT_ID_ERROR);
        }
        Date date = new Date();
        industrySubVo.setUpdateUserId(CurrentUtil.getCurrentUser().getUserId().intValue());
        industrySubVo.setUpdateDate(date);
        boolean result = industrySubService.updateSelectiveById(industrySubVo);
        if (result) {
            logService.addLog(new TSysLog("行业分类设置-编辑", "编辑行业分类设置【" + industrySubVo.getIndustrySubName() + "】成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("行业分类设置-编辑", "编辑行业分类设置【" + industrySubVo.getIndustrySubName() + "】失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (!result) {
            throw new ServiceException(IndustryExpCodeConstant.INFO_EDIT_COLUMN_ERROR);
        }
        return this.getResultMap(true, result);
    }

    /**
     * @return java.util.Map<java.lang.String   ,   java.lang.Object>
     * @Author ZhongShengbin
     * @Description
     * @Date 2020/5/25 0025
     * @Param [datasourceVo]
     **/
    @RequestMapping("industry/delIndustry" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> delDatasource(@RequestParam(value = "industrySubId") Integer industrySubId) throws Exception {
        //校验主键ID
        if (industrySubId == null) {
            throw new ServiceException(IndustryExpCodeConstant.INFO_EDIT_ID_ERROR);
        }
        //执行删除
        boolean result = industrySubService.deleteById(industrySubId);
        if (result) {
            logService.addLog(new TSysLog("行业分类设置-删除", "删除行业分类成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("行业分类设置-删除", "删除行业分类失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (!result) {
            throw new ServiceException(IndustryExpCodeConstant.INFO_EDIT_COLUMN_ERROR);
        }
        return this.getResultMap(true, result);
    }

    /**
     * 获取类型列表
     *
     * @param
     * @return {@link Map< String, Object>}
     * @author wzq
     * @date 2020/5/21 9:23
     */
    @RequestMapping("industry/getIndustryTypes" + WebConstant.NO_AUTH_SUFFIX)
    @ResponseBody
    public Map<String, Object> getIndustryTypes() throws Exception {
        List<IndustrySubVo> industrySubVoList = industrySubService.getIndustryType();
        return this.getResultMap(industrySubVoList);
    }
}
